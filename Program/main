#include <Wire.h>
#include "WiFi.h"
#include <PubSubClient.h>
#include <Adafruit_Sensor.h>
#include "Adafruit_BME680.h"
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#define SEALEVELPRESSURE_HPA (1013.25)


 
Adafruit_BME680 bme; // I2C

Adafruit_SSD1306 display = Adafruit_SSD1306(128, 32, &Wire);
 
#define WIFISSID "Anudeepnagasai" // Put your WifiSSID here
#define PASSWORD "abcdefgh" // Put your wifi password here
#define TOKEN "BBFF-4AaYaXlWDWozwD1wmiNxaJC08vK9od" // Put your Ubidots' TOKEN
#define MQTT_CLIENT_NAME "ESP32_BME680_anudeep_Station" // MQTT client Name, please enter your own 8-12 alphanumeric character ASCII string;
 
/****************************************
  Define Constants
****************************************/
#define VARIABLE_LABEL1 "Temperature" // Assing the variable label
#define VARIABLE_LABEL2 "Humidity" // Assing the variable label
#define VARIABLE_LABEL3 "Pressure"
#define VARIABLE_LABEL4 "Altitude"
#define VARIABLE_LABEL5 "DewPoint"
#define VARIABLE_LABEL6 "Gas"
#define VARIABLE_LABEL7 "IAQ"
#define DEVICE_LABEL "ESP32"

float hum_weighting = 0.25; // so hum effect is 25% of the total air quality score
float gas_weighting = 0.75; // so gas effect is 75% of the total air quality score

float hum_score, gas_score;
float gas_reference = 250000;
float hum_reference = 40;
int   getgasreference_count = 0;
 
char mqttBroker[]  = "industrial.api.ubidots.com";
char payload[1150];
char topic1[150];
char topic2[150];
char topic3[150];
char topic4[150];
char topic5[150];
char topic6[150];
char topic7[150];

 
// Space to store values to send
char str_Temperature[10];
char str_Humidity[10];
char str_Pressure[10];
char str_Altitude[10];
char str_DewPoint[10];
char str_Gas[10];
char str_IAQ[10];
 
/****************************************
  Auxiliar Functions
****************************************/
WiFiClient ubidots;
PubSubClient client(ubidots);
 
 
void callback(char* topic, byte* payload, unsigned int length)
{
  char p[length + 1];
  memcpy(p, payload, length);
  p[length] = NULL;
  String message(p);
  Serial.write(payload, length);
Serial.println(topic);
}
 
void reconnect()
{
  // Loop until we're reconnected
  while (!client.connected())
  {
    Serial.println("Attempting MQTT connection...");
   //  Attemp to connect
    if (client.connect(MQTT_CLIENT_NAME, TOKEN, ""))
    {
      Serial.println("Connected");
    } else
    {
      Serial.print("Failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 2 seconds");
      // Wait 2 seconds before retrying
      delay(2000);
    }
  }
}
 
/****************************************
  Main Functions
****************************************/
 
void setup()
{
  Serial.begin(115200);
  while (!Serial);
 Serial.println(F("BME680 test"));

  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);  // initialize with the I2C addr 0x3C (for the 128x32)
  // init done
  display.display();
  delay(100);
  display.clearDisplay();
  display.display();
  display.setTextSize(1);
  display.setTextColor(WHITE);
 
  if (!bme.begin())
  {
    Serial.println("Could not find a valid BME680 sensor, check wiring!");
    while (1);
  }else Serial.println("Found a sensor");
 
  // Set up oversampling and filter initialization
  bme.setTemperatureOversampling(BME680_OS_8X);
  bme.setHumidityOversampling(BME680_OS_2X);
  bme.setPressureOversampling(BME680_OS_4X);
  bme.setIIRFilterSize(BME680_FILTER_SIZE_3);
  bme.setGasHeater(320, 150); // 320*C for 150 ms
  GetGasReference();
  
  WiFi.begin(WIFISSID, PASSWORD);
  Serial.println();
  Serial.print("Waiting for WiFi Connection ..............");
  while (WiFi.status() != WL_CONNECTED)
  {
    Serial.print(".");
    delay(500);
  }
  Serial.println("");
  Serial.println("WiFi Connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
  client.setServer(mqttBroker, 1883);
  client.setCallback(callback);
}
 
void loop()
{
   display.setCursor(0,0);
  display.clearDisplay();
  
  if (!client.connected())
  {
    reconnect();
  }
  if (! bme.performReading())
  {
    // //Serial.println("Failed to perform reading :(");
    return;
  }
 
  float temperature = (bme.temperature);
  float humidity = (bme.humidity);
  float pressure = (bme.pressure / 100.0);
  float altitude = (bme.readAltitude(SEALEVELPRESSURE_HPA));
  double dewPoint = (dewPointFast(temperature, humidity));
  float gas = (bme.gas_resistance / 1000.0);
 
  Serial.print("Temperature = ");
  Serial.print(temperature);
  Serial.println(" *C");
  display.print("Temperature: "); 
  display.print(bme.temperature); display.println(" *C");
 
  Serial.print("Humidity = ");
  Serial.print(humidity);
  Serial.println(" %");
  display.print("Humidity: "); display.print(bme.humidity); display.println(" %");
  
   Serial.print("Pressure = ");
   Serial.print(pressure);
   Serial.println(" hPa");
 
  Serial.print("Approx. Altitude = ");
  Serial.print(altitude);
  Serial.println(" m");
 
  Serial.print("Dew Point = ");
  Serial.print(dewPoint);
  Serial.println(" *C");
 
  Serial.print("Gas = ");
  Serial.print(gas);
  
  display.print("gas: "); display.print(gas);display.println( "KOhm");
  


//Calculate humidity contribution to IAQ index
  float current_humidity = bme.readHumidity();
  if (current_humidity >= 38 && current_humidity <= 42)
    hum_score = 0.25*100; // Humidity +/-5% around optimum 
  else
  { //sub-optimal
    if (current_humidity < 38) 
      hum_score = 0.25/hum_reference*current_humidity*100;
    else
    {
      hum_score = ((-0.25/(100-hum_reference)*current_humidity)+0.416666)*100;
    }
  }
  
  //Calculate gas contribution to IAQ index
  float gas_lower_limit = 5000;   // Bad air quality limit
  float gas_upper_limit = 50000;  // Good air quality limit 
  if (gas_reference > gas_upper_limit) gas_reference = gas_upper_limit; 
  if (gas_reference < gas_lower_limit) gas_reference = gas_lower_limit;
  gas_score = (0.75/(gas_upper_limit-gas_lower_limit)*gas_reference -(gas_lower_limit*(0.75/(gas_upper_limit-gas_lower_limit))))*100;
  
  //Combine results for the final IAQ index value (0-100% where 100% is good quality air)
  float air_quality_score = hum_score + gas_score;
  float IAQ = air_quality_score;

  Serial.println("Air Quality = "+String(air_quality_score,1)+"% derived from 25% of Humidity reading and 75% of Gas reading - 100% is good quality air");
  Serial.println("Humidity element was : "+String(hum_score/100)+" of 0.25");
  Serial.println("     Gas element was : "+String(gas_score/100)+" of 0.75");
  if (bme.readGas() < 120000) Serial.println("***** Poor air quality *****");
  Serial.println();
  if ((getgasreference_count++)%10==0) GetGasReference(); 
  Serial.println(CalculateIAQ(air_quality_score));
 Serial.println("------------------------------------------------");

 Serial.print("IAQ: "); 
 Serial.println(air_quality_score);
 Serial.println("%");
 
  display.print("IAQ: "); 
  display.print(air_quality_score); 
  display.println(" %");
  display.display();
  dtostrf(temperature, 4, 2, str_Temperature);
  dtostrf(humidity, 4, 2, str_Humidity);
  dtostrf(pressure, 4, 2, str_Pressure);
  dtostrf(altitude, 4, 2, str_Altitude);
  dtostrf(dewPoint, 4, 2, str_DewPoint);
  dtostrf(gas, 4, 2, str_Gas);
  dtostrf(IAQ, 4, 2, str_IAQ);
 
 
  sprintf(topic1, "%s%s", "/v1.6/devices/", DEVICE_LABEL);
  sprintf(payload, "%s", "");
  sprintf(payload, "{\"%s\":", VARIABLE_LABEL1);
  sprintf(payload, "%s {\"value\": %s}}", payload, str_Temperature);
  Serial.println("Publishing temperature to Ubidots Cloud");
  client.publish(topic1, payload);
 
  sprintf(topic2, "%s%s", "/v1.6/devices/", DEVICE_LABEL);
  sprintf(payload, "%s", "");
  sprintf(payload, "{\"%s\":", VARIABLE_LABEL2);
  sprintf(payload, "%s {\"value\": %s}}", payload, str_Humidity);
  Serial.println("Publishing humidity to Ubidots Cloud");
  client.publish(topic2, payload);
 
  sprintf(topic3, "%s%s", "/v1.6/devices/", DEVICE_LABEL);
  sprintf(payload, "%s", "");
  sprintf(payload, "{\"%s\":", VARIABLE_LABEL3);
  sprintf(payload, "%s {\"value\": %s}}", payload, str_Pressure);
  Serial.println("Publishing Pressure data to Ubidots Cloud");
  client.publish(topic3, payload);
 
  sprintf(topic4, "%s%s", "/v1.6/devices/", DEVICE_LABEL);
  sprintf(payload, "%s", "");
  sprintf(payload, "{\"%s\":", VARIABLE_LABEL4);
  sprintf(payload, "%s {\"value\": %s}}", payload, str_Altitude);
  Serial.println("Publishing Altitude data to Ubidots Cloud");
  client.publish(topic4, payload);
 
  sprintf(topic5, "%s%s", "/v1.6/devices/", DEVICE_LABEL);
  sprintf(payload, "%s", "");
  sprintf(payload, "{\"%s\":", VARIABLE_LABEL5);
  sprintf(payload, "%s {\"value\": %s}}", payload, str_DewPoint);
  Serial.println("Publishing Dew Point data to Ubidots Cloud");
  client.publish(topic5, payload);
 
  sprintf(topic6, "%s%s", "/v1.6/devices/", DEVICE_LABEL);
  sprintf(payload, "%s", "");
  sprintf(payload, "{\"%s\":", VARIABLE_LABEL6);
  sprintf(payload, "%s {\"value\": %s}}", payload, str_Gas);
  Serial.println("Publishing Gas data to Ubidots Cloud");
  client.publish(topic6, payload);

  sprintf(topic7, "%s%s", "/v1.6/devices/", DEVICE_LABEL);
  sprintf(payload, "%s", "");
  sprintf(payload, "{\"%s\":", VARIABLE_LABEL7);
  sprintf(payload, "%s {\"value\": %s}}", payload,str_IAQ);
  Serial.println("Publishing IAQ data to Ubidots Cloud");
  client.publish(topic7, payload);

  Serial.print(humidity);
  Serial.print(",");
  Serial.print(gas);
  Serial.print(",");
  Serial.println(air_quality_score);
  Serial.println();
  
  

 
  Serial.println();
  client.loop();
  delay(3000);
}
 
double dewPointFast(double celsius, double humidity)
{
  double a = 17.271;
  double b = 237.7;
  double temp = (a * celsius) / (b + celsius) + log(humidity * 0.01);
  double Td = (b * temp) / (a - temp);
 

return Td;
}
void GetGasReference(){
  // Now run the sensor for a burn-in period, then use combination of relative humidity and gas resistance to estimate indoor air quality as a percentage.
  Serial.println("Getting a new gas reference value");
  int readings = 10;
  for (int i = 1; i <= readings; i++){ // read gas for 10 x 0.150mS = 1.5secs
    gas_reference += bme.readGas();
  }
  gas_reference = gas_reference / readings;
}

String CalculateIAQ(float score){
  String IAQ_text = "Air quality is ";
  score = (100-score)*5;
  if      (score >= 301)                  IAQ_text += "Hazardous";
  else if (score >= 201 && score <= 300 ) IAQ_text += "Very Unhealthy";
  else if (score >= 176 && score <= 200 ) IAQ_text += "Unhealthy";
  else if (score >= 151 && score <= 175 ) IAQ_text += "Unhealthy for Sensitive Groups";
  else if (score >=  51 && score <= 150 ) IAQ_text += "Moderate";
  else if (score >=  00 && score <=  50 ) IAQ_text += "Good";
  return IAQ_text;
  Serial.println(score);
}
